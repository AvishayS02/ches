File Tree:
├── .env
├── .gitignore
├── chess
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── game
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_initial.py
│   │   ├── 0003_bot.py
│   │   ├── __init__.py
│   ├── models.py
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── manage.py
├── requirements.txt
├── templates
│   ├── index.html
│   ├── login.html
│   ├── playgame.html
│   └── register.html
└── users
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── migrations
    │   ├── 0001_initial.py
    │   ├── 0002_alter_user_password_alter_user_username.py
    │   ├── __init__.py
    ├── models.py
    ├── serializers.py
    ├── tests.py
    ├── urls.py
    └── views.py

Files and Their Contents:

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\.env
SECRET_KEY=u_eoipexw2f$@mjvvyk9p!&7rr4$4
DATABASE_NAME=chessdb_56z6
DATABASE_USER=avishay
DATABASE_PASSWORD=eQg8WtEuq25EIhPM4C6fIebzgpG7iQ7A
DATABASE_HOST=dpg-csloq7jqf0us73910sdg-a.frankfurt-postgres.render.com
DATABASE_PORT=5432
#postgresql://avishay:eQg8WtEuq25EIhPM4C6fIebzgpG7iQ7A@dpg-csloq7jqf0us73910sdg-a.frankfurt-postgres.render.com/chessdb_56z6
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1
------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\.gitignore
.env

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chess.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\requirements.txt
asgiref==3.8.1
Django==5.1.2
django-cors-headers==4.6.0
djangorestframework==3.15.2
djangorestframework-simplejwt==5.3.1
PyJWT==2.9.0
sqlparse==0.5.1
tzdata==2024.2

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\chess\asgi.py
"""
ASGI config for chess project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chess.settings')

application = get_asgi_application()

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\chess\settings.py
"""
Django settings for chess project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv
from decouple import config
# Load environment variables from the .env file
import os


load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
#env = environ.Env()
#environ.Env.read_env()
# print(f"SECRET_KEY is:",str(os.getenv('SECRET_KEY')))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', default=False)

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'users',
    'chess',
    'game',
    'corsheaders'
    
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
             'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = 'chess.urls'


WSGI_APPLICATION = 'chess.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),  # Fetch from .env
        'USER': config('DATABASE_USER'),  # Fetch from .env
        'PASSWORD': config('DATABASE_PASSWORD'),  # Fetch from .env
        'HOST': config('DATABASE_HOST'),  # Fetch from .env
        'PORT': config('DATABASE_PORT', '5432'),  # Default to 5432 if not set
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static", ]
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.User'
JWT_AUTH = {
    'JWT_ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'JWT_REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    
}
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "https://cdn.jsdelivr.net", "https://code.jquery.com")
------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\chess\urls.py
from django.urls import path, include
from django.views.generic import TemplateView
from django.contrib import admin

from users import views

urlpatterns = [
    # Admin Panel
    path('admin/', admin.site.urls),

    # User-related pages
    path('register/', TemplateView.as_view(template_name='register.html'), name='register'),  # User registration page (HTML)
    path('login/', TemplateView.as_view(template_name='login.html'), name='login'),  # Login page (HTML)
    
    # User-related API
    path('api/users/', include('users.urls')),  # API for /api/users/ endpoints

    # Game-related pages and API
    path('game/', TemplateView.as_view(template_name='playgame.html'), name='playgame'),
  # Game pages (HTML)
    path('api/game/', include('game.urls')),  # API for /api/game/ endpoints

    # Home page
    path('', TemplateView.as_view(template_name='index.html'), name='home'),
]

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\chess\wsgi.py
"""
WSGI config for chess project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chess.settings')

application = get_wsgi_application()

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\chess\__init__.py

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\admin.py
from django.contrib import admin
from django.contrib import admin
from .models import  Game


admin.site.register(Game)
# Register your models here.

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\apps.py
from django.apps import AppConfig


class GameConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'game'

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\models.py
from django.db import models
from users.models import User


class Bot(models.Model):
    name = models.CharField(max_length=100)
    difficulty = models.CharField(max_length=50, choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy')

    def __str__(self):
        return f"{self.name} ({self.difficulty} Bot)"


class Game(models.Model):
    RESULT_CHOICES = [
        ('White', 'White wins'),
        ('Black', 'Black wins'),
        ('Draw', 'Draw'),
        ('Pending', 'Pending'),
    ]

    white_player = models.ForeignKey(User, related_name='white_games', on_delete=models.CASCADE)
    black_player = models.ForeignKey(User, related_name='black_games', on_delete=models.CASCADE, null=True, blank=True)
    moves = models.TextField(blank=True)  # Store moves in PGN format
    result = models.CharField(max_length=10, choices=RESULT_CHOICES, default='Pending')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

# Create your models here.

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\serializers.py
from rest_framework import serializers
from game.models import Game
from users.models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email']  # You can add more fields if needed

class GameSerializer(serializers.ModelSerializer):
    white_player = UserSerializer()  # Nest the User serializer to get full user data
    black_player = UserSerializer(required=False, allow_null=True)  # Optional black player
    
    class Meta:
        model = Game
        fields = ['id', 'white_player', 'black_player', 'moves', 'result', 'created_at', 'updated_at']
    
    def create(self, validated_data):
        # Extract white player and black player from validated data
        white_player = validated_data['white_player']
        black_player = validated_data.get('black_player', None)  # Make black_player optional
        
        # Create a new Game object
        game = Game.objects.create(
            white_player=white_player,
            black_player=black_player,
            result='Pending'  # Default result is 'Pending'
        )
        return game

    def to_representation(self, instance):
        """
        This will modify the representation of the game instance to include the user details
        in the proper format (i.e., returning the `id`, `username`, `email` of the user).
        """
        representation = super().to_representation(instance)
        # Adjust the serialization of white_player and black_player to return user IDs
        representation['white_player'] = UserSerializer(instance.white_player).data
        if instance.black_player:
            representation['black_player'] = UserSerializer(instance.black_player).data
        return representation

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\tests.py

from django.test import TestCase

# Create your tests here.

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\urls.py
# game/urls.py
from django.urls import path
from . import views
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
urlpatterns = [
    path('refresh/', TokenRefreshView.as_view(), name='refresh_token'),
    path('play/', views.start_game, name='play_game'),
    path('get_opponents/', views.show_opponents, name='get_opponents'),
    path('submit_score/<int:game_id>/', views.submit_score, name='submit_score'),
    path('game_history/', views.game_history, name='get_game_history'),
]

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\views.py
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status
from game.models import Game
from game.serializers import GameSerializer
from users.models import User
from rest_framework.permissions import IsAuthenticated

# View for starting a game
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def start_game(request):
    user = request.user
    opponent_id = request.data.get('opponent_id')

    try:
        opponent = User.objects.get(id=opponent_id)
    except User.DoesNotExist:
        return Response({'error': 'Opponent not found'}, status=status.HTTP_400_BAD_REQUEST)

    # Create a new game (both white and black players)
    game = Game.objects.create(white_player=user, black_player=opponent, result='Pending')

    return Response({'game_id': game.id, 'white_player': game.white_player.username, 'black_player': game.black_player.username}, status=status.HTTP_201_CREATED)

# Get a list of all users (excluding the logged-in user)
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def show_opponents(request):
    user = request.user
    opponents = User.objects.exclude(id=user.id)  # Exclude the logged-in user from the list
    opponent_list = [{'id': opponent.id, 'username': opponent.username} for opponent in opponents]
    return Response(opponent_list, status=status.HTTP_200_OK)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def submit_score(request, game_id):
    try:
        game = Game.objects.get(id=game_id)
    except Game.DoesNotExist:
        return Response({'error': 'Game not found'}, status=status.HTTP_404_NOT_FOUND)

    result = request.data.get('result')  # The result could be "White", "Black", or "Draw"
    if result not in ['White', 'Black', 'Draw']:
        return Response({'error': 'Invalid result'}, status=status.HTTP_400_BAD_REQUEST)

    # Update game result
    game.result = result
    game.save()

    # Update player scores
    if result == 'White':
        game.white_player.score += 1
        game.white_player.save()
    elif result == 'Black':
        game.black_player.score += 1
        game.black_player.save()

    return Response({'msg': 'Game result and scores updated'}, status=status.HTTP_200_OK)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def game_history(request):
    games = Game.objects.filter(player1=request.user) | Game.objects.filter(player2=request.user)
    game_list = [{
        "white_player": game.player1.username,
        "black_player": game.player2.username,
        "result": game.result,
        "date": game.created_at
    } for game in games]
    return Response({"games": game_list})
------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\__init__.py

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\migrations\0001_initial.py
# Generated by Django 5.1.2 on 2024-11-05 16:37

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moves', models.TextField(blank=True)),
                ('result', models.CharField(choices=[('White', 'White wins'), ('Black', 'Black wins'), ('Draw', 'Draw'), ('Pending', 'Pending')], default='Pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
    ]

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\migrations\0002_initial.py
# Generated by Django 5.1.2 on 2024-11-05 16:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('game', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='game',
            name='black_player',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='black_games', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='game',
            name='white_player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='white_games', to=settings.AUTH_USER_MODEL),
        ),
    ]

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\migrations\0003_bot.py
# Generated by Django 5.1.2 on 2024-11-06 13:00

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('game', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('difficulty', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy', max_length=50)),
            ],
        ),
    ]

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\game\migrations\__init__.py

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\templates\index.html
<!DOCTYPE html>
<html lang="en">
<head>    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="referrer" content="origin">
    <title>Homepage - Chess Game</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        /* Custom styles for the homepage */
        .hero-section {
            background: url('https://via.placeholder.com/1200x500/007bff/ffffff?text=Welcome+to+ChessArena') center/cover no-repeat;
            color: white;
            height: 50vh;
            display: flex;
            justify-content: center;
            align-items: center;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .welcome-message {
            font-size: 24px;
            font-weight: bold;
        }

        .card-deck {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

        .card {
            flex: 1 1 calc(33% - 15px);
            max-width: calc(33% - 15px);
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .card {
                flex: 1 1 100%;
                max-width: 100%;
            }
        }
    </style>
</head>

<body>
    <!-- Navbar Section -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">ChessArena</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item" id="loginLink" style="display: none;">
                        <a class="nav-link btn btn-outline-light" href="/login/">Login</a>
                    </li>
                    <li class="nav-item" id="registerLink" style="display: none;">
                        <a class="nav-link btn btn-outline-light" href="/register/">Register</a>
                    </li>
                    <li class="nav-item" id="welcomeMessage" style="display: none;">
                        <span class="nav-link text-white" id="username"></span>
                    </li>
                    <li class="nav-item" id="logoutLink" style="display: none;">
                        <button class="btn btn-outline-light" id="logoutButton">Logout</button>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Hero Section -->
    <div class="hero-section">
        <h1 class="text-center main message">Welcome to ChessArena!</h1>
    </div>


        <!-- Game Lobby Section -->
        <div class="card-deck">
            <div class="card">
                <div class="card-body text-center">
                    <h5 class="card-title">Join a Game</h5>
                    <p class="card-text">Find a player and join a game!</p>
                    <!-- Redirect to playgame.html when clicked -->
                    <button class="btn btn-primary" id="joinLobbyBtn">Join Game</button>
                </div>
            </div>

            <div class="card">
                <div class="card-body text-center">
                    <h5 class="card-title">Play Against Bot</h5>
                    <p class="card-text">Practice your skills against our AI bots!</p>
                    <!-- Redirect to playgame.html for bot play -->
                    <button class="btn btn-secondary" id="playBotBtn">Play Against Bot</button>
                </div>
            </div>

            <div class="card">
                <div class="card-body text-center">
                    <h5 class="card-title">Chess News</h5>
                    <p class="card-text">Stay updated on the latest chess tournaments and features!</p>
                    <button class="btn btn-info" id="newsBtn">Read News</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('loginForm').addEventListener('submit', function(event) {
                event.preventDefault();
    
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
    
                // Using axios to send the POST request
                axios.post('http://127.0.0.1:8000/api/users/login/', {
                    username: username,
                    password: password
                })
                .then(response => {
                    if (response.data.access) {
                        // Store tokens in localStorage
                        localStorage.setItem('access_token', response.data.access);
                        localStorage.setItem('refresh_token', response.data.refresh);
                        localStorage.setItem('username', username);
                        showMessage('Login successful! Redirecting...', 'success');
    
                        // Redirect to the homepage (index.html)
                        window.location.href = "/";
                    } else {
                        console.error('Login failed');
                    }
                })
                .catch(error => { 
                    console.error('Error during login:', error);
                });
            });
        });
    </script>
    2. Homepage (Displaying Logged-In User and Navbar Updates)
    The homepage checks for the token and displays the user's name or redirects to login if not authenticated.
    
    html
    Copy code
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const accessToken = localStorage.getItem('access_token');
            const username = localStorage.getItem('username');
            const welcomeMessage = document.getElementById('welcomeMessage');
    
            if (!accessToken) {
                console.log('No access token found, redirecting to login...');
                window.location.href = '/login/';
                return;
            }
    
            // Verify token validity
            axios.post('http://127.0.0.1:8000/api/users/token/verify/', { token: accessToken })
                .then(() => {
                    // Token is valid, update UI
                    if (username) {
                        welcomeMessage.style.display = 'block';
                        document.getElementById('username').textContent = `Welcome, ${username}`;
                        document.getElementById('logoutLink').style.display = 'block';
                        document.getElementById('loginLink').style.display = 'none';
                        document.getElementById('registerLink').style.display = 'none';
                    } else {
                        console.log('No username found, showing login/register');
                        document.getElementById('logoutLink').style.display = 'none';
                        document.getElementById('loginLink').style.display = 'block';
                        document.getElementById('registerLink').style.display = 'block';
                    }
                })
                .catch(() => {
                    // Token is invalid, redirect to login
                    console.log('Token is invalid or expired, redirecting to login...');
                    window.location.href = '/login/';
                });
    
            // Logout functionality
            document.getElementById('logoutButton')?.addEventListener('click', function () {
                console.log('Logging out...');
                localStorage.removeItem('access_token');
                localStorage.removeItem('refresh_token');
                localStorage.removeItem('username');
                window.location.href = '/login/';
            });
    
            // Redirect to the play game page
            document.getElementById('joinLobbyBtn')?.addEventListener('click', function () {
                window.location.href = '/game/';
            });
    
            document.getElementById('playBotBtn')?.addEventListener('click', function () {
                window.location.href = '/game/';
            });
        });  
    </script>
</body>
</html>

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\templates\login.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="script-src 'self' https://cdn.jsdelivr.net https://code.jquery.com;">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>Login - Chess Game</title>

 <!-- Bootstrap CSS -->
 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    
    
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="/">Chess Game</a>
    </nav>

    <!-- Login Form -->
<div class="container mt-5">
        <h1>Login</h1>
        <form id="loginForm" action="/api/users/login/" method="POST">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" class="form-control" id="username" name="username" required autocomplete="off">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" name="password" required autocomplete="off">
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>

        <div id="errorMessage" class="alert alert-danger mt-3" style="display:none;"></div>
</div>
<script>
document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('loginForm').addEventListener('submit', function (event) {
        event.preventDefault();

        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        axios.post('http://127.0.0.1:8000/api/users/login/', {
            username: username,
            password: password
        })
        .then(response => {
            // Check if the response contains the access token
            if (response.data.access) {
                // Store tokens in localStorage
                localStorage.setItem('access_token', response.data.access);
                localStorage.setItem('refresh_token', response.data.refresh);

                // Optionally store the username for display later
                localStorage.setItem('username', username);

                // Redirect to the homepage or any other page
                window.location.href = 'login/';
            } else {
                // Handle unexpected response (optional)
                alert('Login successful but no access token received.');
            }
        })
        .catch(error => {
            // Handle login errors
            console.error('Error during login:', error.response.data);
            alert('Invalid username or password. Please try again.');
        });
    });
});

</script>
</body>
</html>

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\templates\playgame.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="referrer" content="origin">
    <title>Play Chess - Chess Game</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>
    <div class="container mt-5">
        <h1>Play Chess</h1>
        
        <!-- Start Game Form -->
        <form id="gameForm">
            <div class="form-group">
                <label for="opponent_id">Choose Opponent:</label>
                <select class="form-control" name="opponent_id" id="opponent_id" required>
                    <!-- Opponents will be populated here -->
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Start Game</button>
        </form>

        <h2 class="mt-5">Your Game History</h2>
        
        <!-- Game History Table -->
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>White Player</th>
                    <th>Black Player</th>
                    <th>Result</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody id="gameHistory">
                <!-- Game history will be populated here -->
            </tbody>
        </table>
    </div>

    <!-- JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const accessToken = localStorage.getItem('access_token');
            const username = localStorage.getItem('username');
            
            if (!accessToken) {
                console.log('No access token found, redirecting to login...');
                window.location.href = '/login/';
                return;
            }

            // Fetch available opponents
            axios.get('http://127.0.0.1:8000/api/game/opponents/', {
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            })
            .then(response => {
                const opponents = response.data.opponents;
                const opponentSelect = document.getElementById('opponent_id');
                opponents.forEach(opponent => {
                    const option = document.createElement('option');
                    option.value = opponent.id;
                    option.textContent = opponent.username;
                    opponentSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error fetching opponents:', error);
            });

            // Fetch game history
            axios.get('http://127.0.0.1:8000/api/game/history/', {
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            })
            .then(response => {
                const games = response.data.games;
                const gameHistoryTable = document.getElementById('gameHistory');
                games.forEach(game => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${game.white_player}</td>
                        <td>${game.black_player}</td>
                        <td>${game.result}</td>
                        <td>${game.date}</td>
                    `;
                    gameHistoryTable.appendChild(row);
                });
            })
            .catch(error => {
                console.error('Error fetching game history:', error);
            });

            // Handle game form submission
            document.getElementById('gameForm').addEventListener('submit', function(event) {
                event.preventDefault();
                const opponentId = document.getElementById('opponent_id').value;

                // Send request to start the game
                axios.post('http://127.0.0.1:8000/api/game/start/', {
                    opponent_id: opponentId
                }, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                })
                .then(response => {
                    console.log('Game started successfully:', response.data);
                    // Redirect to the game page
                    window.location.href = '/game/play/';
                })
                .catch(error => {
                    console.error('Error starting game:', error);
                });
            });
        });
    </script>
</body>
</html>
------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\templates\register.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="script-src 'self' https://cdn.jsdelivr.net https://code.jquery.com;">

    <title>Register - Chess Game</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <!-- Correct script order -->
   
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="/">Chess Game</a>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/login/">Login</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/register/">Register</a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Registration Form -->
    <div class="container mt-5">
        <h1>Register</h1>
        <form id="registerForm" method="POST">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required><br><br>
            <label for="email">Email:</label>
            <input type="email" id="email" name="email"><br><br>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required><br><br>
            <button type="submit">Register</button>
        </form>
        <div id="errorMessage" class="alert alert-danger mt-3" style="display:none;"></div>
    </div>

<script>
        document.getElementById('registerForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const username = document.getElementById('username').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            try {
                // Send POST request to the registration API
                const response = await axios.post('http://127.0.0.1:8000/api/users/register', {
                    username: username,
                    email: email,
                    password: password
                });
                if (response.data.access) {
                    const accessToken = response.data.access;  // Access token from registration response
                    localStorage.setItem('access_token', accessToken);  // Store access token
        
                    // Set the Authorization header globally for axios
                    axios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;    
                
                alert('Registration successful! You can now log in.');
                window.location.href = '/users/login/';  // Redirect to login page after registration
                
            } catch (error) {
                // Handle error response from registration (e.g., validation errors)
                const errorMessageDiv = document.getElementById('errorMessage');
                errorMessageDiv.style.display = 'block'; // Show error message
                if (error.response) {
                    const errors = error.response.data;
                    errorMessageDiv.textContent = 'Error: ' + JSON.stringify(errors);
                } else {
                    errorMessageDiv.textContent = 'An unexpected error occurred. Please try again.';
                }
            }
        });
        
</script>
</body>
</html>

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\admin.py
from django.contrib import admin
from django.contrib import admin
from .models import User

admin.site.register(User)

# Register your models here.

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\apps.py
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\models.py

from django.db import models
from django.contrib.auth.models import AbstractUser
class User(AbstractUser):
    username = models.CharField(max_length=100, unique=True)
    password = models.CharField(max_length=100) 
    wins = models.IntegerField(default=0)
    losses = models.IntegerField(default=0)
    draws = models.IntegerField(default=0)
    elo = models.IntegerField(default=1200)
# Create your models here.

def __str__(self):
        return self.username
------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\serializers.py
from rest_framework import serializers
from django.contrib.auth import get_user_model , authenticate

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    # The `password` field is write-only, meaning it will not appear in the response
    # but will be required when creating a new user.
    class Meta:
        model = User
        fields = ['username', 'email', 'password']
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        # We use `get()` to avoid KeyErrors if `email` is missing
        email = validated_data.get('email', None)  # email can be None
        username = validated_data['username']
        password = validated_data['password']
        
        # Create the user instance
        user = User(username=username, email=email)
        
        # Set the hashed password
        user.set_password(password)
        
        # Save the user instance to the database
        user.save()
        
        return user

class LoginSerializer(serializers.Serializer):
    username = serializers.CharField(max_length=255)
    password = serializers.CharField(max_length=255, write_only=True)

    def validate(self, data):
        username = data.get('username')
        password = data.get('password')
        
        # Perform authentication directly here
        user = authenticate(username=username, password=password)
        if user is None:
            raise serializers.ValidationError("Invalid username or password.")
        
        # Optionally pass the authenticated user if needed
        data['user'] = user
        return data
------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\tests.py
from django.test import TestCase

# Create your tests here.

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\urls.py
from django.urls import path
from django.views.generic import TemplateView
from rest_framework_simplejwt.views import TokenVerifyView, TokenRefreshView

from users import views

urlpatterns = [
    # Registration and Login
    path('register/', views.register, name='register'),  # Corrected to views.register
    path('login/', views.login, name='login'),            # Corrected to views.login
    path('home/', views.home, name='home'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),  # Refresh the access token
    path('token/verify/', TokenVerifyView.as_view(), name='token_verify'),    # Verify the access token
    path('profile/', views.profile, name='profile')
]


------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\views.py
import logging
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.tokens import RefreshToken
from users.serializers import UserSerializer, LoginSerializer
from django.contrib.auth import authenticate
from rest_framework.permissions import IsAuthenticated
from django.urls import reverse
from django.shortcuts import render

logger = logging.getLogger(__name__)


# Login view
@api_view(['POST'])
@permission_classes([AllowAny])
def login(request):
    serializer = LoginSerializer(data=request.data)
    if serializer.is_valid():
        user = authenticate(
            username=serializer.validated_data['username'],
            password=serializer.validated_data['password']
        )
        if user:
            refresh = RefreshToken.for_user(user)
            return Response({
                'access': str(refresh.access_token),
                'refresh': str(refresh),
            }, status=status.HTTP_200_OK)
        return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



@api_view(['POST'])
@permission_classes([AllowAny])
def register(request):
    # Deserialize the request data using the UserSerializer
    serializer = UserSerializer(data=request.data)

    # Validate the incoming data
    if serializer.is_valid():
        # Save the new user to the database
        serializer.save()

        # Return a success response
        return Response({'detail': 'Registration successful'}, status=status.HTTP_201_CREATED)

    # If the data is invalid, return an error response
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
@permission_classes([IsAuthenticated])  # Only authenticated users can access their profile
def profile(request):
    # Get the user making the request
    user = request.user
    # Return user information (you can customize what information you want to return)
    return Response({
        'username': user.username,
        'email': user.email,
        'date_joined': user.date_joined,
        'last_login': user.last_login})


def home(request):
    return render(request, 'index.html')

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\__init__.py

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\migrations\0001_initial.py
# Generated by Django 5.1.2 on 2024-11-06 13:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('draws', models.IntegerField(default=0)),
                ('elo', models.IntegerField(default=1200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\migrations\0002_alter_user_password_alter_user_username.py
# Generated by Django 5.1.2 on 2024-11-13 12:33

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='user',
            name='password',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(max_length=100, unique=True),
        ),
    ]

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------

C:\Users\idanach\Downloads\WEB Projects\chess_web_dev\users\migrations\__init__.py

------------------------------------------------------------------------
****************************************************************************
------------------------------------------------------------------------
